{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { appStorageName } from '../../globals/globalVariables';\n\nfunction getUser() {\n  let userFromStorage = localStorage.getItem(appStorageName);\n\n  if (userFromStorage === null) {\n    return {\n      username: null,\n      location: null\n    };\n  } else {\n    userFromStorage = JSON.parse(userFromStorage);\n    return userFromStorage;\n  }\n}\n\nconst userFromStorage = getUser();\nconst initialState = {\n  username: userFromStorage.username,\n  location: userFromStorage.location\n};\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    createUser: (state, action) => {\n      const userForStorage = JSON.stringify(action.payload);\n      localStorage.setItem(appStorageName, userForStorage); // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n\n      state.username = action.payload.username;\n      state.location = action.payload.location;\n    },\n    deleteUser: state => {\n      localStorage.removeItem(appStorageName);\n      state.username = null, state.location = null;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  createUser,\n  deleteUser\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["C:/Users/Kevin/Desktop/fwd-3400/day-07/lessons/05-react-localstorage/complete/src/features/user/userSlice.js"],"names":["createSlice","appStorageName","getUser","userFromStorage","localStorage","getItem","username","location","JSON","parse","initialState","userSlice","name","reducers","createUser","state","action","userForStorage","stringify","payload","setItem","deleteUser","removeItem","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,cAAT,QAA+B,+BAA/B;;AAEA,SAASC,OAAT,GAAkB;AAChB,MAAIC,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqBJ,cAArB,CAAtB;;AACA,MAAGE,eAAe,KAAK,IAAvB,EAA4B;AACxB,WAAO;AAAEG,MAAAA,QAAQ,EAAE,IAAZ;AAAkBC,MAAAA,QAAQ,EAAE;AAA5B,KAAP;AACH,GAFD,MAEK;AACDJ,IAAAA,eAAe,GAAGK,IAAI,CAACC,KAAL,CAAWN,eAAX,CAAlB;AACA,WAAOA,eAAP;AACH;AACF;;AAED,MAAMA,eAAe,GAAGD,OAAO,EAA/B;AAEA,MAAMQ,YAAY,GAAG;AACnBJ,EAAAA,QAAQ,EAAEH,eAAe,CAACG,QADP;AAEnBC,EAAAA,QAAQ,EAAEJ,eAAe,CAACI;AAFP,CAArB;AAKA,OAAO,MAAMI,SAAS,GAAGX,WAAW,CAAC;AACnCY,EAAAA,IAAI,EAAE,MAD6B;AAEnCF,EAAAA,YAFmC;AAGnCG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7B,YAAMC,cAAc,GAAGT,IAAI,CAACU,SAAL,CAAeF,MAAM,CAACG,OAAtB,CAAvB;AACAf,MAAAA,YAAY,CAACgB,OAAb,CAAqBnB,cAArB,EAAqCgB,cAArC,EAF6B,CAG7B;AACA;AACA;AACA;;AACAF,MAAAA,KAAK,CAACT,QAAN,GAAiBU,MAAM,CAACG,OAAP,CAAeb,QAAhC;AACAS,MAAAA,KAAK,CAACR,QAAN,GAAiBS,MAAM,CAACG,OAAP,CAAeZ,QAAhC;AACD,KAVO;AAWRc,IAAAA,UAAU,EAAGN,KAAD,IAAW;AACrBX,MAAAA,YAAY,CAACkB,UAAb,CAAwBrB,cAAxB;AACAc,MAAAA,KAAK,CAACT,QAAN,GAAiB,IAAjB,EACAS,KAAK,CAACR,QAAN,GAAiB,IADjB;AAED;AAfO;AAHyB,CAAD,CAA7B,C,CAsBP;;AACA,OAAO,MAAM;AAAEO,EAAAA,UAAF;AAAcO,EAAAA;AAAd,IAA6BV,SAAS,CAACY,OAA7C;AAEP,eAAeZ,SAAS,CAACa,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { appStorageName } from '../../globals/globalVariables';\n\nfunction getUser(){\n  let userFromStorage = localStorage.getItem(appStorageName);\n  if(userFromStorage === null){\n      return { username: null, location: null };\n  }else{\n      userFromStorage = JSON.parse(userFromStorage);\n      return userFromStorage;\n  }\n}\n\nconst userFromStorage = getUser();\n\nconst initialState = {\n  username: userFromStorage.username,\n  location: userFromStorage.location\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    createUser: (state, action) => {\n      const userForStorage = JSON.stringify(action.payload);\n      localStorage.setItem(appStorageName, userForStorage);\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.username = action.payload.username;\n      state.location = action.payload.location;\n    },\n    deleteUser: (state) => {\n      localStorage.removeItem(appStorageName);\n      state.username = null, \n      state.location = null;\n    }\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { createUser, deleteUser } = userSlice.actions;\n\nexport default userSlice.reducer;"]},"metadata":{},"sourceType":"module"}